name: Cache Node and NPM deps
description: This action allows to cache both node and npm deps based on package-lock.json

inputs: 
  node-version:
    description: NodeJS version to use
    default: 20.x
    required: true 
  working-dir:
    description: The working dir of the application
    default: '.'
    required: false
  target-env:
    description: '"dev or "prod". Controls whether dev deps are installed.'
    default: "dev"
    required: false

outputs:
  installed-deps: # If there was no cache hit then the dependencies were installed
    description: 'If dependencies were installed or not'
    value: ${{ steps.cache.outputs.cache.hit != 'true'}}
  custom-output-example:
    description: 'showing output from a custom step'
    value: ${{ steps.custom-ouput-example.outputs.custom-output }} # reference by the ID on the step and then the key of the output appended to the GITHUB_OUTPUT file

runs: 
  using: composite
  steps: 
    - name: Setup Node JS version ${{ inputs.node-version }}
      uses: actions/setup-node@v3
      with: 
        node-version: ${{ inputs.node-version }}
    - name: Cache deps
      id: cache
      uses: actions/cache@v3
      with:
        path: ${{ inputs.working-dir }}/node_modules
        key: node-modules-${{ inputs.target-env }}-${{ hashFiles(format('{0}/{1}', inputs.working-dir, 'package-lock.json')) }}
    - name: Install deps
      if: steps.cache.outputs.cache.hit != 'true'
      run: ${{ inputs.target-env == 'dev' && 'npm ci' || 'npm ci --omit=dev' }}
      shell: bash
      working-directory: ${{ inputs.working-dir }}
    - name: Custom Output Example
      shell: bash
      id: custom-ouput-example
      run: echo "custom-output=Always be testing!" >> "$GITHUB_OUTPUT" 

